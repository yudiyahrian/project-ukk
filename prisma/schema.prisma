generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(uuid())
  name          String        @unique
  email         String?       @unique
  password      String?
  description   String?
  emailVerified DateTime?     @map("email_verified")
  image         String?
  bannerImage   String?
  role          Role          @default(user)
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  accounts      Account[]
  Album         Album[]
  CommentLike   CommentLike[]
  Comment       Comment[]
  Like          Like[]
  Photo         Photo[]
  sessions      Session[]
  Post          Post[]
  Follower      UserFollow[]
  FollowedUser  UserFollow[]  @relation("FollowedUser")
  UserSaved     UserSaved[]

  @@map("users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String?
  provider          String
  providerAccountId String   @map("provider_account_id")
  token_type        String?
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  scope             String?
  id_token          String?  @db.Text
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "accounts_user_id_fkey")
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @unique @map("session_token")
  accessToken  String?  @map("access_token") @db.Text
  expires      DateTime
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "sessions_user_id_fkey")
  @@map("sessions")
}

model Album {
  id          String      @id @default(cuid())
  userId      String?     @map("user_id")
  name        String
  description String?
  privacy     Privacy     @default(public)
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  user        User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  photos      Photo[]
  Post        Post[]
  UserSaved   UserSaved[]

  @@index([userId], map: "albums_user_id_fkey")
  @@map("albums")
}

model Photo {
  id        String      @id @default(cuid())
  photo     String
  caption   String?
  userId    String?     @map("user_id")
  albumId   String?     @map("album_id")
  privacy   Privacy     @default(public)
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")
  Comment   Comment[]
  PhotoLike Like[]
  album     Album?      @relation(fields: [albumId], references: [id], onDelete: Cascade)
  user      User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  Post      Post?       @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String?
  UserSaved UserSaved[]

  @@index([albumId], map: "photos_album_id_fkey")
  @@index([userId], map: "photos_user_id_fkey")
  @@map("photos")
}

model Post {
  id          String      @id @default(cuid())
  title       String
  description String?
  userId      String      @map("user_id")
  albumId     String?     @map("album_id")
  privacy     Privacy     @default(public)
  photos      Photo[]
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  Like        Like[]
  Comment     Comment[]
  album       Album?      @relation(fields: [albumId], references: [id], onDelete: Cascade)
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  UserSaved   UserSaved[]

  @@map("posts")
}

model Comment {
  id          String        @id @default(cuid())
  photoId     String?       @map("photo_id")
  postId      String?       @map("post_id")
  userId      String        @map("user_id")
  replyToId   String?       @map("reply_to_id")
  content     String
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  CommentLike CommentLike[]
  replyTo     Comment?      @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies     Comment[]     @relation("ReplyTo")
  photo       Photo?        @relation(fields: [photoId], references: [id], onDelete: Cascade)
  post        Post?         @relation(fields: [postId], references: [id], onDelete: Cascade)
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([replyToId], map: "comments_parent_comment_id_fkey")
  @@index([photoId], map: "comments_photo_id_fkey")
  @@index([userId], map: "comments_user_id_fkey")
  @@map("comments")
}

model Like {
  id        String   @id @default(cuid())
  photoId   String?  @map("photo_id")
  postId    String?  @map("post_id")
  userId    String   @map("user_id")
  liked     Boolean
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  photo     Photo?   @relation(fields: [photoId], references: [id], onDelete: Cascade)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([photoId], map: "photo_likes_photo_id_fkey")
  @@index([userId], map: "photo_likes_user_id_fkey")
  @@map("likes")
}

model CommentLike {
  id        String   @id @default(cuid())
  commentId String   @map("comment_id")
  userId    String   @map("user_id")
  liked     Boolean
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([commentId], map: "comment_likes_comment_id_fkey")
  @@index([userId], map: "comment_likes_user_id_fkey")
  @@map("comment_likes")
}

model verificationrequest {
  id         String   @id
  identifier String
  token      String   @unique(map: "VerificationRequest_token_key")
  expires    DateTime
  created_at DateTime @default(now())
  updated_at DateTime

  @@unique([identifier, token], map: "VerificationRequest_identifier_token_key")
}

model UserFollow {
  id             String   @id @default(cuid())
  followerId     String   @map("follower_id")
  followedUserId String   @map("followed_user_id")
  followed       Boolean
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  follower       User     @relation(fields: [followerId], references: [id], onDelete: Cascade)
  followedUser   User     @relation("FollowedUser", fields: [followedUserId], references: [id], onDelete: Cascade)

  @@unique([followerId, followedUserId], map: "user_follow_follower_id_followed_user_id_key")
  @@index([followerId], map: "user_follow_follower_id_index")
  @@index([followedUserId], map: "user_follow_followed_user_id_index")
  @@map("user_follows")
}

model UserSaved {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  postId    String?  @map("post_id")
  photoId   String?  @map("photo_id")
  albumId   String   @default("user-saved-image") @map("album_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  photo     Photo?   @relation(fields: [photoId], references: [id], onDelete: Cascade)
  album     Album    @relation(fields: [albumId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([photoId], map: "saved_photo_photo_id_fkey")
  @@index([userId], map: "saved_photo_user_id_fkey")
  @@index([postId], map: "saved_photo_post_id_fkey")
  @@index([albumId], map: "saved_photo_album_id_fkey")
  @@map("user_saved")
}

enum Role {
  user
  admin
}

enum Privacy {
  public
  private
}
