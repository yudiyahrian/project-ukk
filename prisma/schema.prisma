// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(uuid())
  name          String
  email         String?       @unique
  password      String?
  emailVerified DateTime?     @map("email_verified")
  image         String?
  role          Role          @default(user)
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  accounts      Account[]
  sessions      Session[]
  Photo         Photo[]
  Comment       Comment[]
  PhotoLike     PhotoLike[]
  CommentLike   CommentLike[]
  Album         Album[]

  @@map("users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String?
  provider          String
  providerAccountId String   @map("provider_account_id")
  token_type        String?
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  scope             String?
  id_token          String?  @db.Text
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @unique @map("session_token")
  accessToken  String?  @map("access_token") @db.Text
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@unique([identifier, token])
}

model Album {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Establishing the relationship with the User table
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relationship with Photo table
  photos Photo[]

  @@map("albums")
}

// Update the Photo model to include the Album relationship
model Photo {
  id           String      @id @default(cuid())
  userId       String?     @map("user_id")
  albumId      String?     @map("album_id") // Foreign Key referencing Albums table
  sessionToken String      @unique @map("session_token")
  accessToken  String?     @map("access_token") @db.Text
  expires      DateTime
  user         User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  album        Album?      @relation(fields: [albumId], references: [id])
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")
  Comment      Comment[]
  PhotoLike    PhotoLike[]

  @@map("photos")
}

model Comment {
  id              String   @id @default(cuid())
  photoId         String   @map("photo_id") // Foreign Key referencing Photos table 
  userId          String   @map("user_id") // Foreign Key referencing Users table
  parentCommentId String?  @map("parent_comment_id") // Foreign Key referencing Comments table
  content         String
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Establishing the relationships
  photo         Photo    @relation(fields: [photoId], references: [id])
  user          User     @relation(fields: [userId], references: [id])
  parentComment Comment? @relation("ChildComments", fields: [parentCommentId], references: [id])

  // Establishing the relationship with child comments
  childComments Comment[]     @relation("ChildComments")
  CommentLike   CommentLike[]

  @@map("comments")
}

model PhotoLike {
  id        String   @id @default(cuid())
  photoId   String   @map("photo_id") // Foreign Key referencing Photos table
  userId    String   @map("user_id") // Foreign Key referencing Users table
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Establishing the relationships
  photo Photo @relation(fields: [photoId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@map("photo_likes")
}

model CommentLike {
  id        String   @id @default(cuid())
  commentId String   @map("comment_id") // Foreign Key referencing Comments table
  userId    String   @map("user_id") // Foreign Key referencing Users table
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Establishing the relationships
  comment Comment @relation(fields: [commentId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@map("comment_likes")
}

enum Role {
  user
  admin
}
